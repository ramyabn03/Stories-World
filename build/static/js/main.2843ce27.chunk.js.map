{"version":3,"sources":["components/UI/Button/LoadingSpinner.js","components/UI/Button/LoadingSpinner.module.css","App.js","index.js","store/auth-context.js"],"names":["LoadingSpinner","className","classes","spinner","module","exports","AddYourStory","React","lazy","UserLogin","TableData","NotFound","App","fallback","path","element","replace","to","ReactDOM","createRoot","document","getElementById","render","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","useState","setIsLoggedIn","useEffect","localStorage","getItem","Provider","value","removeItem","swal","title","text","timer","setItem","children"],"mappings":"mIAAA,4BAMeA,IAJQ,WACrB,OAAO,qBAAKC,UAAWC,IAAQC,SAChC,C,qBCHDC,EAAOC,QAAU,CAAC,QAAU,gC,wICQtBC,EAAeC,IAAMC,MAAK,kBAAM,4BAAN,IAC1BC,EAAYF,IAAMC,MAAK,kBAAM,4BAAN,IACvBE,EAAYH,IAAMC,MAAK,kBAAM,4BAAN,IACvBG,EAAWJ,IAAMC,MAAK,kBAAM,4BAAN,IA4BbI,MAzBf,WAGE,OACE,cAAC,IAAD,UACA,cAAC,WAAD,CAAUC,SAAU,8BAAK,cAACb,EAAA,EAAD,MAAzB,SACE,eAAC,IAAD,WACA,cAAC,IAAD,CAAOc,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAUC,SAAO,EAACC,GAAG,aAE5C,cAAC,IAAD,CAAOH,KAAK,WAAWC,QAAS,cAACN,EAAD,MAGhC,cAAC,IAAD,CAAOK,KAAK,YAAYC,QAAS,cAACT,EAAD,MAGjC,cAAC,IAAD,CAAOQ,KAAK,cAAcC,QAAS,cAACL,EAAD,MAEnC,cAAC,IAAD,CAAOI,KAAK,IAAIC,QAAS,cAACJ,EAAD,YAMhC,E,OC/BYO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAD,UACE,cAAC,EAAD,M,qHCPEC,EAAchB,IAAMiB,cAAc,CACtCC,YAAY,EACZC,SAAU,WAAQ,EAClBC,QAAS,SAACC,EAAOC,GAAe,IAGrBC,EAAsB,SAACC,GAClC,MAAoCC,oBAAS,GAA7C,mBAAOP,EAAP,KAAmBQ,EAAnB,KAEAC,qBAAU,WAG8B,QAFAC,aAAaC,QAAQ,eAGzDH,GAAc,EAGjB,GAAE,IAiBH,OACE,cAACV,EAAYc,SAAb,CACEC,MAAO,CACLb,WAAYA,EACZC,SAnBgB,WACpBS,aAAaI,WAAW,cACxBN,GAAc,GACdO,IAAK,CACHC,MAAO,wBACPC,KAAM,GACNC,MAAO,KAEV,EAYKhB,QAVe,WACnBQ,aAAaS,QAAQ,aAAc,OACnCX,GAAc,EACf,GAGC,SAOGF,EAAMc,UAGZ,EAEctB,K","file":"static/js/main.2843ce27.chunk.js","sourcesContent":["import classes from './LoadingSpinner.module.css';\r\n\r\nconst LoadingSpinner = () => {\r\n  return <div className={classes.spinner}></div>;\r\n}\r\n\r\nexport default LoadingSpinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__RHYp-\"};","import React, { Suspense } from 'react';\nimport { Route, Routes, Navigate} from 'react-router-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport LoadingSpinner from './components/UI/Button/LoadingSpinner';\n//import UserLogin from './components/pages/UserLogin';\n//import TableData from './components/pages/TableData';\n//import AddYourStory from './components/pages/AddYourStory';\n\n\nconst AddYourStory = React.lazy(() => import('./components/pages/AddYourStory'));\nconst UserLogin = React.lazy(() => import('./components/pages/UserLogin'));\nconst TableData = React.lazy(() => import('./components/pages/TableData'));\nconst NotFound = React.lazy(() => import('./components/pages/NotFound'));\n\n\nfunction App() {\n\n\n  return (\n    <BrowserRouter>\n    <Suspense fallback={<div><LoadingSpinner /></div>}>\n      <Routes>\n      <Route path=\"/\" element={<Navigate replace to=\"/login\" />} >\n      </Route>\n        <Route path='/login/*' element={<UserLogin />}>\n        </Route>\n\n        <Route path='/addStory' element={<AddYourStory />}>\n        </Route>\n\n        <Route path='/rowDetails' element={<TableData />}>\n        </Route>\n        <Route path='*' element={<NotFound />}>\n        </Route>\n      </Routes>\n</Suspense>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\nimport { AuthContextProvider } from './store/auth-context';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <AuthContextProvider>\n    <App />\n  </AuthContextProvider>\n);\n","import React, { useState, useEffect } from 'react';\nimport swal from 'sweetalert';\n\nconst AuthContext = React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\n\nexport const AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n    if (storedUserLoggedInInformation === 'Yes') {\n      setIsLoggedIn(true);\n      \n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n    swal({\n      title: \"Logout Successfull :)\",\n      text: \"\",\n      timer: 2000\n    });\n  };\n\n  const loginHandler = () => {\n    localStorage.setItem('isLoggedIn', 'Yes');\n    setIsLoggedIn(true);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: isLoggedIn,\n        onLogout: logoutHandler,\n        onLogin: loginHandler,\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"sourceRoot":""}